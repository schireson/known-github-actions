name: Reusable lint and test workflow
on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: >
          The sub-directory to run commands out of
      python-versions:
        required: false
        type: string
        default: >-
          ["3.9"]
        description: >
          The python versions to utilize in workflow.
          Can be a json formatted list. Each python version will run
          in a github matrix.
      fail-fast:
        required: false
        type: boolean
        default: true
        description: Whether to fail-fast the matrix
      test:
        required: false
        type: boolean
        default: true
        description: Whether to run "make test"
      lint:
        required: false
        type: boolean
        default: true
        description: Whether to run "make lint"
      coverage:
        required: false
        type: boolean
        default: true
        description: Whether to submit coverage
      check-python-license:
        required: false
        type: boolean
        default: true
        description: Whether to check the python licenses
      ecr-credentials:
        required: false
        type: boolean
        default: false
        description: Whether to setup ECR credentials
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
        description: >
          The name of the environment to run on. This defaults to
          'ubuntu-latest'
    secrets:
      POETRY_HTTP_BASIC_SCHIRESON_USERNAME:
        required: false
      POETRY_HTTP_BASIC_SCHIRESON_PASSWORD:
        required: false
jobs:
  test:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:11.12
        env:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
        python_version: ${{fromJson(inputs.python-versions)}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python_version }}
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared --enable-optimizations

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Fix poetry
        run: |
          poetry self add keyrings.cryptfile@latest
          poetry self add pkginfo==1.10.0
      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: ${{ inputs.working-directory }}/.venv
          key: venv-${{ runner.os }}-${{ inputs.runs-on }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        env:
          POETRY_HTTP_BASIC_SCHIRESON_USERNAME: ${{ secrets.POETRY_HTTP_BASIC_SCHIRESON_USERNAME }}
          POETRY_HTTP_BASIC_SCHIRESON_PASSWORD: ${{ secrets.POETRY_HTTP_BASIC_SCHIRESON_PASSWORD }}
        run: make install

      - name: Lint
        if: ${{ inputs.lint }}
        run: |
          source .venv/bin/activate
          make lint

      - name: Test
        if: ${{ inputs.test }}
        run: |
          source .venv/bin/activate
          make test
        env:
          PMR_POSTGRES_CI_PORT: 5432
          COVERAGE_PROCESS_START: pyproject.toml
      - name: Store test result artifacts
        if: ${{ inputs.test && inputs.coverage }}
        uses: actions/upload-artifact@v3
        with:
          path: ${{ inputs.working-directory }}/coverage.xml

      - name: Check python license
        if: ${{ inputs.check-python-license }}
        run: |
          pip install pip-licenses

          wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x ./jq
          sudo cp jq /usr/bin

          output=$(pip-licenses -f json --with-authors | jq '
            .[]
            | select(
                .License
                | contains("MIT")
                  or contains("BSD")
                  or contains("Apache")
                  or contains("LGPL")
                  or contains("Artistic License")
                  or contains("HPND")
                  or contains("ISCL")
                  or contains("MPL 2.0")
                  or contains("Public Domain")
                  or contains("WTFPL")
                  or contains("Zope Public")
                  or contains("Python Software Foundation")
                | not
              )
            | select (
                .Name
                | startswith("ma-")
                or startswith("media-activation-")
                or IN("strapp")  # Internal packages
                or IN("ptpython")  # Improperly identified packages
                | not
              )
            | select (.Author == "Known" | not)
            ')
          if [[ $output = "" ]]; then
            echo 'No violations!'
          else
            echo "$output" | jq
            echo "Please read our Open-Source Software License Policy on your VPN"
            echo https://engineering.docs.known.is/engineering/open-source-software-license-policy/
            exit 1
          fi
